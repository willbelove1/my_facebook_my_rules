/**
 * Module: FeedExpander
 * M·ª•c ƒë√≠ch: M·ªü r·ªông c√°c m·ª•c trong news feed c·ªßa Facebook (width: 100%) - CH·ªà TR√äN TRANG CH·ª¶
 * Phi√™n b·∫£n: 3.1.0
 * T√≠ch h·ª£p: FBCMF framework, ki·ªÉm tra ctx.settings.expandNewsFeed
 * C·∫≠p nh·∫≠t: Ch·ªâ ho·∫°t ƒë·ªông tr√™n facebook.com (trang ch·ªß), t·ª± ƒë·ªông t·∫Øt tr√™n c√°c trang con
 */
(function() {
  'use strict';

  // ƒê·∫£m b·∫£o namespace FBCMF ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
  window.FBCMF = window.FBCMF || {};

  FBCMF.registerModule = FBCMF.registerModule || function(name, initFn) {
    if (!FBCMF.modules) FBCMF.modules = {};
    FBCMF.modules[name] = initFn;
  };

  FBCMF.registerModule('FeedExpander', async (ctx) => {
    let mutationObserver = null;
    let urlObserver = null;
    let timer = null;
    let expandedCount = 0;
    let isActive = false;

    // T·ªëi ∆∞u log d·ª±a tr√™n verbosity
    function log(message, level = 'verbose') {
      if (ctx.settings?.verbosity === 'verbose' || level === 'error') {
        console[level === 'error' ? 'error' : 'log'](`[FeedExpander] ${message}`);
      }
    }

    log('Kh·ªüi t·∫°o v·ªõi context: ' + Object.keys(ctx).join(', '));

    // Ki·ªÉm tra xem c√≥ ph·∫£i trang ch·ªß Facebook kh√¥ng
    function isHomePage() {
      const url = new URL(window.location.href);
      // Ch·ªâ ch·∫•p nh·∫≠n:
      // - facebook.com/
      // - facebook.com/?sk=h_chr (trang ch·ªß v·ªõi tham s·ªë)
      // - facebook.com (kh√¥ng c√≥ path)
      return url.hostname === 'www.facebook.com' && 
             (url.pathname === '/' || url.pathname === '') &&
             !url.pathname.includes('/profile/') &&
             !url.pathname.includes('/groups/') &&
             !url.pathname.includes('/pages/') &&
             !url.searchParams.has('id'); // Lo·∫°i b·ªè c√°c URL c√≥ tham s·ªë id (profile)
    }

    // H√†m m·ªü r·ªông c√°c m·ª•c trong news feed
    function expandNewsFeed() {
      if (!ctx.settings?.expandNewsFeed || !isActive) {
        return;
      }

      if (!isHomePage()) {
        log('Kh√¥ng ph·∫£i trang ch·ªß Facebook, t·∫°m d·ª´ng m·ªü r·ªông');
        pauseModule();
        return;
      }

      const feedItems = document.querySelectorAll('.x193iq5w');
      let currentCount = 0;
      
      feedItems.forEach(item => {
        if (item.style.width !== '100%') {
          item.style.width = '100%';
          currentCount++;
          expandedCount++;
        }
      });

      if (currentCount > 0) {
        log(`ƒê√£ m·ªü r·ªông ${currentCount} m·ª•c news feed (t·ªïng: ${expandedCount})`);
      }
    }

    // Thi·∫øt l·∫≠p MutationObserver cho container
    function setupFeedObserver(retryCount = 0, maxRetries = 5) {
      if (!ctx.settings?.expandNewsFeed || !isActive) {
        return;
      }

      if (!isHomePage()) {
        log('Kh√¥ng ph·∫£i trang ch·ªß Facebook, kh√¥ng thi·∫øt l·∫≠p feed observer');
        return;
      }

      const feedContainer = document.querySelector('.xxzkxad');
      if (feedContainer) {
        if (mutationObserver) {
          mutationObserver.disconnect();
        }
        
        mutationObserver = new MutationObserver(() => {
          expandNewsFeed();
        });
        mutationObserver.observe(feedContainer, { childList: true, subtree: true });
        log('ƒê√£ thi·∫øt l·∫≠p MutationObserver cho container .xxzkxad');
      } else {
        if (retryCount < maxRetries) {
          log(`Kh√¥ng t√¨m th·∫•y container .xxzkxad, th·ª≠ l·∫°i l·∫ßn ${retryCount + 1} sau 1s`);
          timer = setTimeout(() => setupFeedObserver(retryCount + 1, maxRetries), 1000);
        } else {
          log('Kh√¥ng t√¨m th·∫•y container .xxzkxad sau nhi·ªÅu l·∫ßn th·ª≠', 'error');
        }
      }
    }

    // Thi·∫øt l·∫≠p observer ƒë·ªÉ theo d√µi thay ƒë·ªïi URL
    function setupUrlObserver() {
      // Theo d√µi thay ƒë·ªïi URL b·∫±ng popstate
      window.addEventListener('popstate', handleUrlChange);
      
      // Theo d√µi thay ƒë·ªïi URL b·∫±ng MutationObserver tr√™n document
      urlObserver = new MutationObserver(() => {
        handleUrlChange();
      });
      
      // Observe changes to the entire document to catch navigation
      urlObserver.observe(document, { 
        childList: true, 
        subtree: true,
        attributes: true,
        attributeFilter: ['href']
      });
      
      log('ƒê√£ thi·∫øt l·∫≠p URL observer');
    }

    // X·ª≠ l√Ω thay ƒë·ªïi URL
    function handleUrlChange() {
      const wasActive = isActive;
      const shouldBeActive = isHomePage() && ctx.settings?.expandNewsFeed;
      
      if (shouldBeActive && !wasActive) {
        log('Chuy·ªÉn ƒë·∫øn trang ch·ªß - K√≠ch ho·∫°t FeedExpander');
        activateModule();
      } else if (!shouldBeActive && wasActive) {
        log('R·ªùi kh·ªèi trang ch·ªß - T·∫°m d·ª´ng FeedExpander');
        pauseModule();
      }
    }

    // K√≠ch ho·∫°t module
    function activateModule() {
      if (isActive) return;
      
      isActive = true;
      expandNewsFeed();
      
      // Delay ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ load
      timer = setTimeout(() => {
        setupFeedObserver();
      }, 2000);
      
      log('‚úÖ ƒê√£ k√≠ch ho·∫°t FeedExpander');
    }

    // T·∫°m d·ª´ng module (kh√¥ng h·ªßy ho√†n to√†n)
    function pauseModule() {
      if (!isActive) return;
      
      isActive = false;
      
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }

      if (mutationObserver) {
        mutationObserver.disconnect();
        mutationObserver = null;
      }
      
      log('‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng FeedExpander');
    }

    // Kh·ªüi t·∫°o module
    function init() {
      if (!document.body) {
        log('DOM ch∆∞a s·∫µn s√†ng, th·ª≠ l·∫°i sau 1s');
        setTimeout(init, 1000);
        return;
      }

      if (!ctx.settings?.expandNewsFeed) {
        log('T√≠nh nƒÉng m·ªü r·ªông news feed b·ªã t·∫Øt, kh√¥ng kh·ªüi t·∫°o');
        return;
      }

      // Thi·∫øt l·∫≠p URL observer ngay t·ª´ ƒë·∫ßu
      setupUrlObserver();

      // Ki·ªÉm tra v√† k√≠ch ho·∫°t n·∫øu ƒëang ·ªü trang ch·ªß
      if (isHomePage()) {
        activateModule();
      } else {
        log('Kh√¥ng ph·∫£i trang ch·ªß Facebook, FeedExpander ·ªü ch·∫ø ƒë·ªô ch·ªù');
      }

      log('üöÄ ƒê√£ kh·ªüi t·∫°o FeedExpander v·ªõi URL monitoring');
    }

    // H·ªßy module ho√†n to√†n
    function destroy() {
      pauseModule();
      
      if (urlObserver) {
        urlObserver.disconnect();
        urlObserver = null;
      }
      
      window.removeEventListener('popstate', handleUrlChange);

      // Kh√¥i ph·ª•c style g·ªëc
      const feedItems = document.querySelectorAll('.x193iq5w');
      feedItems.forEach(item => {
        if (item.style.width === '100%') {
          item.style.width = '';
        }
      });

      expandedCount = 0;
      isActive = false;
      log('üóëÔ∏è ƒê√£ h·ªßy FeedExpander ho√†n to√†n');
    }

    // M·ªü r·ªông ngay l·∫≠p t·ª©c (ch·ªâ khi active)
    function expandNow() {
      if (isActive && isHomePage()) {
        expandNewsFeed();
        log('ƒê√£ ch·∫°y m·ªü r·ªông news feed theo y√™u c·∫ßu');
      } else {
        log('FeedExpander kh√¥ng active ho·∫∑c kh√¥ng ·ªü trang ch·ªß, b·ªè qua y√™u c·∫ßu expandNow');
      }
    }

    // Kh·ªüi t·∫°o
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }

    // Tr·∫£ v·ªÅ API cho context
    return {
      init,
      destroy,
      expandNow,
      isActive: () => isActive,
      isHomePage
    };
  });
})();
